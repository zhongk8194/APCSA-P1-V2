import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Canvas;
import java.awt.event.ActionEvent;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import static java.lang.Character.*;
import java.awt.image.BufferedImage;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

public class OuterSpace extends Canvas implements KeyListener, Runnable
{
	private Ship ship;
	//private Alien alienOne;
	//private Alien alienTwo;
	//private Ammo ammo;

	//uncomment once you are ready for this part
	 
	private AlienHorde horde;
	private Bullets shots;
	private boolean game;
	private boolean[] keys;
	private BufferedImage back;

	public OuterSpace()
	{
		setBackground(Color.black);

		keys = new boolean[5];

		//instantiate other instance variables
		//Ship, Alien
		ship = new Ship(380,450,80,80,3);
		//alienOne = new Alien(340,100,50,50,3);
		//alienTwo = new Alien(420,100,50,50,3);
		//ammo = new Ammo(400,420,3);
		horde = new AlienHorde(20);
		shots = new Bullets();
		shots.add(new Ammo(-10,-10,0));
		//put it in negative position so that it doesn't appear on screen
		game = true;

		this.addKeyListener(this);
		new Thread(this).start();

		setVisible(true);
	}

   public void update(Graphics window)
   {
	   paint(window);
   }

	public void paint( Graphics window )
	{
		//set up the double buffering to make the game animation nice and smooth
		Graphics2D twoDGraph = (Graphics2D)window;

		//take a snap shop of the current screen and same it as an image
		//that is the exact same width and height as the current screen
		if(back==null)
		   back = (BufferedImage)(createImage(getWidth(),getHeight()));
			//back = new BufferedImage(getWidth(),getHeight(),BufferedImage.TYPE_INT_RGB);
		

		//create a graphics reference to the back ground image
		//we will draw all changes on the background image
		Graphics graphToBack = back.createGraphics();

		graphToBack.setColor(Color.BLUE);
		graphToBack.drawString("StarFighter ", 25, 50 );
		graphToBack.setColor(Color.BLACK);
		graphToBack.fillRect(0,0,800,600);
		//ship.draw(window);
		ship.draw(graphToBack);
		//alienOne.draw(window);
		//ammo.draw(window);
		//ammo.move("");

		//alienTwo.draw(window);
		//alienOne.move("");
		//alienTwo.move("");
		//alienOne.checkDead(ammo);
		//alienTwo.checkDead(ammo);
		shots.cleanEmUp(window);
		shots.moveEmAll();
		shots.drawEmAll(graphToBack);
		horde.drawEmAll(graphToBack);
		//horde.moveEmAll("");
		
		horde.removeDeadOnes(shots.getList());
		


		/**if(keys[0] == true)
			ship.move("LEFT");
		if(keys[1] == true)
			ship.move("RIGHT");
		if(keys[2] == true)
			ship.move("UP");
		if(keys[3] == true)
			ship.move("DOWN");**/
		if (ship.getX()>=-10 && game==true)
		{
			if(keys[0] == true) ship.move("LEFT");
		}
		if (ship.getX()<=715 && game==true)
		{
			if (keys[1] == true) ship.move("RIGHT");
		}
		if (ship.getY()>=-10 && game==true)
		{
			if (keys[2] == true) ship.move("UP");
		}
		if (ship.getY()<=470 && game==true)
		{
			if (keys[3] == true) ship.move("DOWN");
		}
		if(keys[4] == true)
		{
			//ship.move("UP");
			//ammo.draw(window);
			//ammo.move("");
			//timer = 0;
			//ammo = new Ammo(400,420,3);
			//ammo.draw(window);
			shots.add(new Ammo(ship.getX()+25,ship.getY(),-1));
		}
			
	
		if (game==true)
		{
			horde.moveEmAll("");
		}
	/**	Timer timer = new Timer();
		timer.schedule(new TimerTask() {
			public void run() {
				ship.move();
			}
		}, 500);
		
		if (shots.touchingShip(window, ship) == true)
		{
			setBackground(Color.black);	
			graphToBack.setColor(Color.RED);

			graphToBack.drawString("YOU LOSE!",300, 300);		
		}
		**/
		
		if (horde.gameIsWon()==true)
		{
			setBackground(Color.black);			
			graphToBack.setColor(Color.PINK);
			graphToBack.drawString("YOU WON!",300, 300);
		}
		//add in collision detection to see if Bullets hit the Aliens and if Bullets hit the Ship


		twoDGraph.drawImage(back, null, 0, 0);
	}


	public void keyPressed(KeyEvent e)
	{
		if (e.getKeyCode() == KeyEvent.VK_LEFT)
		{
			keys[0] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_RIGHT)
		{
			keys[1] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_UP)
		{
			keys[2] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_DOWN)
		{
			keys[3] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_SPACE)
		{
			keys[4] = true;
		}
		repaint();
	}

	public void keyReleased(KeyEvent e)
	{
		if (e.getKeyCode() == KeyEvent.VK_LEFT)
		{
			keys[0] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_RIGHT)
		{
			keys[1] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_UP)
		{
			keys[2] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_DOWN)
		{
			keys[3] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_SPACE)
		{
			keys[4] = false;
		}
		repaint();
	}
	
	

	public void keyTyped(KeyEvent e)
	{
      //no code needed here
	}

   public void run()
   {
   	try
   	{
   		while(true)
   		{
   		   Thread.currentThread().sleep(5);
            repaint();
         }
      }catch(Exception e)
      {
      }
  	}
}
